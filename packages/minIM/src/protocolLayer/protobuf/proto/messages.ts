// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "messages.proto" (package "im", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * *
 * 一包数据
 *
 * @generated from protobuf message im.PackData
 */
export interface PackData {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // 消息id
    /**
     * @generated from protobuf field: uint32 from = 2;
     */
    from: number; // 发送者
    /**
     * @generated from protobuf field: uint32 to = 3;
     */
    to: number; // 接收者
    /**
     * @generated from protobuf field: im.PackType type = 4;
     */
    type: PackType; // 消息类型
    /**
     * @generated from protobuf field: bytes payload = 5;
     */
    payload: Uint8Array; // 消息内容
    /**
     * @generated from protobuf field: uint32 timestamp = 6;
     */
    timestamp: number; // 时间戳
}
/**
 * *
 * 登陆请求体
 *
 * @generated from protobuf message im.LoginReq
 */
export interface LoginReq {
    /**
     * @generated from protobuf field: uint32 uid = 1;
     */
    uid: number;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message im.LoginRes
 */
export interface LoginRes {
    /**
     * @generated from protobuf field: uint32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string reason = 2;
     */
    reason: string;
}
/**
 * *
 * 数据类型
 *
 * @generated from protobuf enum im.PackType
 */
export enum PackType {
    /**
     * *
     * 登陆
     *
     * @generated from protobuf enum value: LOGIN_REQ = 0;
     */
    LOGIN_REQ = 0,
    /**
     * @generated from protobuf enum value: LOGIN_RES = 1;
     */
    LOGIN_RES = 1,
    /**
     * *
     * 退出
     *
     * @generated from protobuf enum value: LOGOUT_REQ = 2;
     */
    LOGOUT_REQ = 2,
    /**
     * @generated from protobuf enum value: LOGOUT_RES = 3;
     */
    LOGOUT_RES = 3,
    /**
     * *
     * 文本
     *
     * @generated from protobuf enum value: TEXT = 4;
     */
    TEXT = 4,
    /**
     * *
     * 图片
     *
     * @generated from protobuf enum value: IMAGE = 5;
     */
    IMAGE = 5,
    /**
     * *
     * 语音
     *
     * @generated from protobuf enum value: AUDIO = 6;
     */
    AUDIO = 6,
    /**
     * *
     * 视频
     *
     * @generated from protobuf enum value: VEDIO = 7;
     */
    VEDIO = 7,
    /**
     * *
     * 视频
     *
     * @generated from protobuf enum value: CUSTOM = 8;
     */
    CUSTOM = 8
}
/**
 * *
 * 聊天类型
 *
 * @generated from protobuf enum im.ChatType
 */
export enum ChatType {
    /**
     * *
     * 单聊消息
     *
     * @generated from protobuf enum value: CHAT = 0;
     */
    CHAT = 0,
    /**
     * *
     * 群聊消息
     *
     * @generated from protobuf enum value: GROUP_CHAT = 1;
     */
    GROUP_CHAT = 1,
    /**
     * *
     * 系统消息
     *
     * @generated from protobuf enum value: SYSTEM = 2;
     */
    SYSTEM = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class PackData$Type extends MessageType<PackData> {
    constructor() {
        super("im.PackData", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "to", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["im.PackType", PackType] },
            { no: 5, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PackData>): PackData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.from = 0;
        message.to = 0;
        message.type = 0;
        message.payload = new Uint8Array(0);
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<PackData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PackData): PackData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* uint32 from */ 2:
                    message.from = reader.uint32();
                    break;
                case /* uint32 to */ 3:
                    message.to = reader.uint32();
                    break;
                case /* im.PackType type */ 4:
                    message.type = reader.int32();
                    break;
                case /* bytes payload */ 5:
                    message.payload = reader.bytes();
                    break;
                case /* uint32 timestamp */ 6:
                    message.timestamp = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PackData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* uint32 from = 2; */
        if (message.from !== 0)
            writer.tag(2, WireType.Varint).uint32(message.from);
        /* uint32 to = 3; */
        if (message.to !== 0)
            writer.tag(3, WireType.Varint).uint32(message.to);
        /* im.PackType type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* bytes payload = 5; */
        if (message.payload.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.payload);
        /* uint32 timestamp = 6; */
        if (message.timestamp !== 0)
            writer.tag(6, WireType.Varint).uint32(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.PackData
 */
export const PackData = new PackData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginReq$Type extends MessageType<LoginReq> {
    constructor() {
        super("im.LoginReq", [
            { no: 1, name: "uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginReq>): LoginReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uid = 0;
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<LoginReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginReq): LoginReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 uid */ 1:
                    message.uid = reader.uint32();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 uid = 1; */
        if (message.uid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.uid);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LoginReq
 */
export const LoginReq = new LoginReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRes$Type extends MessageType<LoginRes> {
    constructor() {
        super("im.LoginRes", [
            { no: 1, name: "code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginRes>): LoginRes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<LoginRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRes): LoginRes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 code */ 1:
                    message.code = reader.uint32();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).uint32(message.code);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.LoginRes
 */
export const LoginRes = new LoginRes$Type();
